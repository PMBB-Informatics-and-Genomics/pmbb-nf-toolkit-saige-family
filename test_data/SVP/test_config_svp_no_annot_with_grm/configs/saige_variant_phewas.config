params {
    // default assumes use of the docker container
    my_python = '/opt/conda/bin/python'
    
    // gpu paramater either ON or OFF
    GPU = 'OFF'
    
    data_csv = "${launchDir}/Input/pheno_1000samples.txt_withdosages_withBothTraitTypes.csv"
    cohort_sets = "${launchDir}/Input/pheno_1000samples.txt_withdosages_withBothTraitTypes.COHORTS.csv"

    // binary and quantitative phenotype lists
    // bin_pheno_list_file = "/path/to/directory/phecode_list_with_prefix.txt"
    bin_pheno_list = "${launchDir}/Input/pheno_1000samples.txt_withdosages_withBothTraitTypes.bin_pheno_list_file.txt"
    quant_pheno_list = "${launchDir}/Input/pheno_1000samples.txt_withdosages_withBothTraitTypes.quant_pheno_list_file.txt"

    pheno_descriptions_file = "${launchDir}/Input/pheno_descriptions_categories.csv"
    sex_specific_pheno_file = null

    //setting file type for step 2 (PLINK/BGEN)
    // ftype = "PLINK"
    ftype = "PLINK"

    // default paths are for PMBB Geno data (PLINK)
    step1_plink_prefix  = "${launchDir}/Input/nfam_100_nindep_0_step1_includeMoreRareVariants_poly_22chr"

    // default paths are for PMBB Geno data (BGEN)
    step2_bgen_prefix  = ""
    samplefile = ""


    // desired snps to extract for step 2 (tsv 4 columns, one snp per line: chr start stop rsid)
    snplist = "${launchDir}/Input/test_svp_snplist.txt"
    // step2_input_prefix = chr seperated 
    step2_plink_prefix = "${launchDir}/Input/genotype_100markers_2chr.chr"

    group_file_prefix = ""

    info = 0.4

    // categorical and continuous covariates
    cat_covars = ["x2"]
    cont_covars = ["x1"]
    // Covariates
    sex_strat_cat_covars = []
    sex_strat_cont_covars = cont_covars
    
    // P-Value Threshold for Summarizing Results at the End
    p_cutoff_summarize = 0.001

    // ID column label
    id_col = "IID"

    min_bin_cases = 1
    min_quant_n = 1

    // Plink parameters for SAIGE Step 1 Input QC which needs a small set of high-quality variants
    // Current defaults are recommended by GBMI analysis plan
    maf = 0.01
    geno = 0.01
    hwe = 1E-6

    // SAIGE-GENE Step 2 Parameters
    // Current defaults are recommended by BRAVA analysis plan
    min_maf = 0
    min_mac = 0.5
    grouptest_maf = "0.01"
    grouptest_annotation = "pLoF,damaging_missense,other_missense,synonymous,pLoF;damaging_missense,pLoF;damaging_missense;other_missense;synonymous"
    use_firth = "TRUE"
    firth_cutoff = 0.1
    LOCO = "FALSE"

    // this is for getting gene-based coordinates for plotting
    // also wrapped in the docker container


    // list of cohorts (usually ancestry-stratified)
    cohort_list = [
        "POP1", "POP2", "POP3"
        ]

    sex_strat_cohort_list = ["POP3"]

    // list of chromosome 
    chromosome_list = ["1"]
   
    // default paths assume use of the docker container
    step1_script = "/usr/local/bin/step1_fitNULLGLMM.R"      
    step2_script = "/usr/local/bin/step2_SPAtests.R"
   
    use_sparse_GRM = true
    step1_sparse_grm = "${launchDir}/Input/sparseGRM_relatednessCutoff_0.125_2000_randomMarkersUsed.sparseGRM.mtx"
    step1_sparse_grm_samples = "${launchDir}/Input/sparseGRM_relatednessCutoff_0.125_2000_randomMarkersUsed.sparseGRM.mtx.sampleIDs.txt"
   
    // Dictionary (Map) with default SAIGE Region column names mapped to new ones
    region_col_names = [
        Region: 'gene',
        Group: 'annot',
        max_MAF: 'max_maf',
        Pvalue: 'p_value',
        Pvalue_Burden: 'p_value_burden',
        BETA_Burden: 'beta_burden',
        SE_Burden: 'se_burden',
        Pvalue_SKAT: 'p_value_skat',
        MAC: 'mac',
        MAC_case: 'mac_case',
        MAC_control: 'mac_control',
        Number_rare: 'rare_var_count',
        Number_ultra_rare: 'ultrarare_var_count'
    ]

    // Dictionary (Map) with default SAIGE SingleAssoc column names mapped to new ones
    singles_col_names = [
        CHR: 'chromosome',
        POS: 'base_pair_location',
        MarkerID: 'variant_id',
        Allele1: 'other_allele',
        Allele2: 'effect_allele',
        AC_Allele2: 'effect_allele_count',
        AF_Allele2: 'effect_allele_frequency',
        MissingRate: 'missing_rate',
        BETA: 'beta',
        SE: 'standard_error',
        Tstat: 't_statistic',
        var: 'variance',
        'p.value': 'p_value',
        'p.value.NA': 'p_value_na',
        'Is.SPA': 'is_spa_test',
        AF_case: 'allele_freq_case',
        AF_ctrl: 'allele_freq_ctrl',
        N_case: 'n_case',
        N_ctrl: 'n_ctrl',
        N_case_hom: 'n_case_hom',
        N_case_het: 'n_case_het',
        N_ctrl_hom: 'n_ctrl_hom',
        N_ctrl_het: 'n_ctrl_het',
        N: 'n'
    ]
}